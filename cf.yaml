AWSTemplateFormatVersion: "2010-09-09"
Description: CF template for deploying single-page static serverless site
Parameters:
    SiteFQDN:
        Type: String
        Default: samplewebpage.josh-rosenberg.com
    BranchName:
        Description: GitHub branch name
        Type: String
        Default: master
    RepositoryName:
        Description: GitHub repository name
        Type: String
        Default: rosenbergj/helloworld
    GitHubOwner:
        Type: String
    GitHubSecret:
        Type: String
        NoEcho: true
    GitHubOAuthToken:
        Type: String
        NoEcho: true
Resources:
    MyBucket:
        # Bucket for the website.
        #
        # We're not using WebsiteConfiguration (s3 static website hosting)
        # because of a lack of https support.
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref SiteFQDN
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                IgnorePublicAcls: true
                BlockPublicPolicy: false
                RestrictPublicBuckets: false
        DeletionPolicy: Delete
    MyBucketPolicy:
        # Public access policy for the bucket
        Type: AWS::S3::BucketPolicy
        Properties:
            PolicyDocument:
                Id: MyPolicy
                Version: 2012-10-17
                Statement:
                    - Sid: PublicReadForGetBucketObjects
                      Effect: Allow
                      Principal: '*'
                      Action: 's3:GetObject'
                      Resource: !Join
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Ref MyBucket
                            - /*
            Bucket: !Ref MyBucket
    MyCFAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: "Here is my OAIC"
    MyCFDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Origins:
                    - Id: MyS3Origin
                      DomainName: !Join
                        - ''
                        - - !Ref MyBucket
                          - '.s3.amazonaws.com'
                      S3OriginConfig:
                          OriginAccessIdentity: !Join
                            - ''
                            - - 'origin-access-identity/cloudfront/'
                              - !Ref MyCFAccessIdentity

                Aliases:
                    - !Ref SiteFQDN
                DefaultRootObject: index.html
                # Would include logging here if required by specification
                PriceClass: PriceClass_100
                DefaultCacheBehavior:
                    TargetOriginId: MyS3Origin
                    ViewerProtocolPolicy: redirect-to-https # why we're using cloudfront at all
                    DefaultTTL: 60
                    ForwardedValues:
                        QueryString: false
                ViewerCertificate:
                    CloudFrontDefaultCertificate: true #to be changed
                Enabled: true
    MyIAMPipelineRole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - codepipeline.amazonaws.com
                Action: 'sts:AssumeRole'
          Path: /
          Policies:
            - PolicyName: AWS-CodePipeline-Service-3
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                      - 'codedeploy:CreateDeployment'
                      - 'codedeploy:GetApplicationRevision'
                      - 'codedeploy:GetDeployment'
                      - 'codedeploy:GetDeploymentConfig'
                      - 'codedeploy:RegisterApplicationRevision'
                    Resource: '*'
                  - Effect: Allow
                    Action:
                      - 'iam:PassRole'
                    Resource: '*'
                  - Effect: Allow
                    Action:
                      - 'cloudwatch:*'
                      - 's3:*'
                    Resource: '*'
    MyPipelineWebhook:
        Type: 'AWS::CodePipeline::Webhook'
        Properties:
          Authentication: GITHUB_HMAC
          AuthenticationConfiguration:
            SecretToken: !Ref GitHubSecret
          Filters:
            - JsonPath: $.ref
              MatchEquals: 'refs/heads/{Branch}'
          TargetPipeline: !Ref MyPipeline
          TargetAction: GithubSource
          Name: MyPipelineWebhook
          TargetPipelineVersion: !GetAtt
            - MyPipeline
            - Version
          RegisterWithThirdParty: true
    MyPipelineBucket:
        Type: 'AWS::S3::Bucket'
    MyPipelineArtifactStoreBucketPolicy:
        Type: 'AWS::S3::BucketPolicy'
        Properties:
            Bucket: !Ref MyPipelineBucket
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Sid: DenyUnEncryptedObjectUploads
                    Effect: Deny
                    Principal: '*'
                    Action: 's3:PutObject'
                    Resource: !Join
                      - ''
                      - - !GetAtt
                          - MyPipelineBucket
                          - Arn
                        - /*
                    Condition:
                        StringNotEquals:
                            's3:x-amz-server-side-encryption': 'aws:kms'
                  - Sid: DenyInsecureConnections
                    Effect: Deny
                    Principal: '*'
                    Action: 's3:*'
                    Resource: !Join
                      - ''
                      - - !GetAtt
                          - MyPipelineBucket
                          - Arn
                        - /*
                    Condition:
                        Bool:
                            'aws:SecureTransport': false
    MyPipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: HelloPipeline
            RestartExecutionOnUpdate: true
            RoleArn: !GetAtt
                - MyIAMPipelineRole
                - Arn
            ArtifactStore:
                Type: S3
                Location: !Ref MyPipelineBucket
            Stages:
                - Name: Source
                  Actions:
                      - Name: GithubSource
                        ActionTypeId:
                            Category: Source
                            Owner: ThirdParty
                            Version: 1
                            Provider: GitHub
                        OutputArtifacts:
                            - Name: HelloZip
                        Configuration:
                            Owner: !Ref GitHubOwner
                            Repo: !Ref RepositoryName
                            Branch: !Ref BranchName
                            OAuthToken: !Ref GitHubOAuthToken
                            PollForSourceChanges: false
                        RunOrder: 1
                - Name: Deploy
                  Actions:
                      - Name: DeployToS3
                        ActionTypeId:
                            Category: Deploy
                            Owner: AWS
                            Version: 1
                            Provider: S3
                        InputArtifacts:
                            - Name: HelloZip
                        Configuration:
                            BucketName: !Ref SiteFQDN
                            Extract: true
